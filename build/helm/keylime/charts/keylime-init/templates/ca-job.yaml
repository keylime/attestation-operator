{{- if .Values.global.ca.generate -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "init.jobNameCA" . }}
  labels:
    {{- include "init.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "13"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  completions: 1
  backoffLimit: 1
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "init.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "init.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      restartPolicy: Never
      containers:
        - name: {{ .Chart.Name }}
          env:
            - name: KEYLIME_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KEYLIME_SECRETS_NAME
              value: "{{ include "keylime.ca.secret.certs" . }}"
            - name: KEYLIME_CA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "keylime.ca.secret.password" . }}
                  key: KEYLIME_CA_PASSWORD
            - name: KEYLIME_SECRETS_CA_PW_NAME
              value: "{{ include "keylime.ca.secret.password" . }}"
          command:
            - /bin/bash
            - -c
            - |
              ls /usr/local/bin/kubectl
              if [[ $? -ne 0 ]]
              then
                  pushd /usr/local/bin
                  curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
                  chmod +x /usr/local/bin/kubectl
                  popd
              fi

              if [[ -z $KEYLIME_CA_PASSWORD ]]
              then
                echo "ERROR: unable to find created secret"
                exit 1
              fi

              # check if the secrets exist already in which case we'll just respect them
              kubectl get secret $KEYLIME_SECRETS_NAME --namespace ${KEYLIME_NAMESPACE}
              if [[ $? -eq 0 ]]
              then
                echo "NOTE: secret containing TLS certificates already exist, we will *NOT* recreate it!"
                exit 0
              fi

              # create a directory where we'll generate the certs to
              mkdir -p /tmp/certs
              cd /tmp

              # this generates a password for the CA which is required

              # now generate the CV CA
              keylime_ca -d /tmp/certs --command init && keylime_ca -d /tmp/certs --command create --name server && keylime_ca -d /tmp/certs --command create --name client
              if [[ $? -ne 0 ]]
              then
                echo "ERROR: unable to generete certificates"
                exit 1
              fi

              # create Kubernetes secrets from this - we'll create a separate secret for the CA password
              kubectl create secret generic $KEYLIME_SECRETS_NAME --namespace ${KEYLIME_NAMESPACE} --from-file=/tmp/certs
              if [[ $? -ne 0 ]]
              then
                echo "ERROR: unable to create secret with certificates"
                exit 1
              fi
              kubectl get secret $KEYLIME_SECRETS_NAME --namespace ${KEYLIME_NAMESPACE}
              if [[ $? -ne 0 ]]
              then
                echo "ERROR: unable to check if secret with certificates was indeed created"
                exit 1
              fi
              exit 0
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
